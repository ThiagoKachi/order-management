// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Product, Category and Order

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusType {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED

  @@map("status_type")
}

enum Role {
  SELLER
  CLIENT

  @@map("role")
}

model Account {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  email           String            @unique
  password        String
  orders          Order[]
  products        Product[]
  favorites       Favorite[]
  FavoriteProduct FavoriteProduct[]
  role            Role              @default(CLIENT)
  refreshTokens   RefreshToken[]

  @@map("accounts")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  accountId String   @db.Uuid
  issuedAt  DateTime @default(now())
  expiresAt DateTime

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Order {
  id         String         @id @default(uuid()) @db.Uuid
  orderId    Int            @unique @default(autoincrement())
  status     StatusType     @default(PENDING)
  created_at DateTime       @default(now())
  deleted_at DateTime?
  updated_at DateTime       @updatedAt
  products   OrderProduct[]

  account   Account @relation(fields: [accountId], references: [id])
  accountId String  @db.Uuid

  @@map("orders")
}

model Favorite {
  id         String            @id @default(uuid()) @db.Uuid
  created_at DateTime          @default(now())
  deleted_at DateTime?
  products   FavoriteProduct[]

  account   Account @relation(fields: [accountId], references: [id])
  accountId String  @db.Uuid

  @@map("favorites")
}

model Category {
  id         String    @id @default(uuid()) @db.Uuid
  name       String    @unique
  created_at DateTime  @default(now())
  deleted_at DateTime?
  updated_at DateTime  @updatedAt
  products   Product[]

  @@map("categories")
}

model Product {
  id            String    @id @default(uuid()) @db.Uuid
  name          String    @unique
  description   String
  price         Float
  created_at    DateTime  @default(now())
  deleted_at    DateTime?
  updated_at    DateTime  @updatedAt
  product_image String    @default("")
  stock         Int       @default(1)

  category         Category          @relation(fields: [categoryId], references: [id])
  categoryId       String            @db.Uuid
  orderProduct     OrderProduct[]
  favoriteProducts FavoriteProduct[]

  account   Account @relation(fields: [accountId], references: [id])
  accountId String  @db.Uuid

  @@map("products")
}

model OrderProduct {
  orderId   String @db.Uuid
  productId String @db.Uuid
  quantity  Int

  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  favoriteId String? @db.Uuid

  @@id([orderId, productId])
  @@map("order_products")
}

model FavoriteProduct {
  favoriteId String @db.Uuid
  productId  String @db.Uuid

  favorite  Favorite @relation(fields: [favoriteId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  account   Account  @relation(fields: [accountId], references: [id])
  accountId String   @db.Uuid

  @@id([favoriteId, productId])
  @@map("favorite_products")
}
